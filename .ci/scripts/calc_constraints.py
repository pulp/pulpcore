# WARNING: DO NOT EDIT!
#
# This file was generated by plugin_template, and is managed by it. Please use
# './plugin-template --github pulpcore' to update this file.
#
# For more info visit https://github.com/pulp/plugin_template

import argparse
import fileinput
import sys
from urllib.request import urlopen, Request
from packaging.requirements import Requirement
from packaging.version import Version
from packaging.utils import canonicalize_name
import json

try:
    import tomllib
except ImportError:
    import tomli as tomllib


PYPI_URL = "https://pypi.org/simple/{canonical_name}/"


def fetch_package_versions(name):
    canonical_name = canonicalize_name(name, validate=True)
    with urlopen(
        Request(
            PYPI_URL.format(canonical_name=canonical_name),
            headers={"Accept": "application/vnd.pypi.simple.v1+json"},
        )
    ) as f:
        data = json.load(f)
    versions = sorted(
        (
            Version(v)
            for v in data["versions"]
            if all(
                (
                    f["yanked"] is False
                    for f in data["files"]
                    if f["filename"].startswith(f"{data['name']}-{v}")
                )
            )
        )
    )
    return versions


def applicable_versions(requirement):
    return sorted(
        (v for v in fetch_package_versions(requirement.name) if v in requirement.specifier)
    )


def split_comment(line):
    split_line = line.split("#", maxsplit=1)
    try:
        comment = "  # " + split_line[1].strip()
    except IndexError:
        comment = ""
    return split_line[0].strip(), comment


def to_upper_bound(req):
    try:
        requirement = Requirement(req)
    except ValueError:
        return f"# UNPARSABLE: {req}"
    else:
        max_version = applicable_versions(requirement)[-1]
        return f"{requirement.name}=={max_version}"


def to_lower_bound(req):
    try:
        requirement = Requirement(req)
    except ValueError:
        return f"# UNPARSABLE: {req}"
    else:
        for spec in requirement.specifier:
            if spec.operator == ">=":
                min_version = spec.version
                if requirement.name == "pulpcore":
                    # Currently an exception to allow for pulpcore bugfix releases.
                    # TODO Semver libraries should be allowed too.
                    operator = "~="
                    if len(Version(min_version).release) != 3:
                        raise RuntimeError("Pulpcore lower bound must be in the form '>=x.y.z'.")
                else:
                    operator = "=="
                return f"{requirement.name}{operator}{min_version}"
        return f"# NO LOWER BOUND: {req}"


def main():
    """Calculate constraints for the lower bound of dependencies where possible."""
    parser = argparse.ArgumentParser(
        prog=sys.argv[0],
        description="Calculate constraints for the lower or upper bound of dependencies where "
        "possible.",
    )
    parser.add_argument("-u", "--upper", action="store_true")
    parser.add_argument("filename", nargs="*")
    args = parser.parse_args()

    modifier = to_upper_bound if args.upper else to_lower_bound

    req_files = [filename for filename in args.filename if not filename.endswith("pyproject.toml")]
    pyp_files = [filename for filename in args.filename if filename.endswith("pyproject.toml")]
    if req_files:
        with fileinput.input(files=req_files) as req_file:
            for line in req_file:
                if line.strip().startswith("#"):
                    # Shortcut comment only lines
                    print(line.strip())
                else:
                    req, comment = split_comment(line)
                    new_req = modifier(req)
                    print(new_req + comment)
    for filename in pyp_files:
        with open(filename, "rb") as fp:
            pyproject = tomllib.load(fp)
            for req in pyproject["project"]["dependencies"]:
                new_req = modifier(req)
                print(new_req)
            optional_dependencies = pyproject["project"].get("optional-dependencies")
            if optional_dependencies:
                for opt in optional_dependencies.values():
                    for req in opt:
                        new_req = modifier(req)
                        print(new_req)


if __name__ == "__main__":
    main()
