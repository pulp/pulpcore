import pytest

from unittest.mock import Mock, AsyncMock, patch

from pulpcore.app.tasks.vulnerability_report import VulnerabilityReportScanner
from pulpcore.constants import OSV_QUERY_URL


class TestVulnerabilityReportScanner:
    """Test cases for VulnerabilityReportScanner class methods."""

    @pytest.mark.asyncio
    async def test_process_reports(self):
        """Test _process_reports method with basic input data."""
        mock_semaphore = AsyncMock()
        mock_generator = AsyncMock()
        mock_session = Mock()
        scanner = VulnerabilityReportScanner(mock_semaphore, mock_generator, mock_session)

        mock_content = Mock()
        mock_repo_version = Mock()

        repo_content_osv_data = {
            "package": {"name": "requests", "ecosystem": "PyPI"},
            "version": "2.28.0",
            "content": mock_content,
            "repo_version": mock_repo_version,
        }
        expected_vulns = [{"id": "GHSA-test-1234", "summary": "Test vulnerability"}]
        vulnerability_response = {"vulns": expected_vulns}

        with patch.object(scanner, "_query_osv_api", return_value=vulnerability_response):
            # Mock the semaphore context manager
            mock_semaphore.__aenter__ = AsyncMock()
            mock_semaphore.__aexit__ = AsyncMock()

            with patch.object(scanner.total_scanned, "aincrement", new_callable=AsyncMock):
                vulns, content, repo_version = await scanner._process_reports(repo_content_osv_data)
                assert vulns == expected_vulns
                assert content == mock_content
                assert repo_version == mock_repo_version

    @pytest.mark.asyncio
    async def test_query_osv_api_success(self):
        """Test _query_osv_api method with successful response."""
        mock_semaphore = AsyncMock()
        mock_generator = AsyncMock()
        scanner = VulnerabilityReportScanner(mock_semaphore, mock_generator)

        osv_data = {"package": {"name": "requests", "ecosystem": "PyPI"}, "version": "2.25.0"}
        expected_response = {
            "vulns": [
                {
                    "id": "GHSA-abcd-1234",
                    "summary": "Test vulnerability",
                    "details": "Detailed vulnerability description",
                }
            ]
        }

        # Mock the HTTP response
        mock_response = AsyncMock()
        mock_response.json.return_value = expected_response

        # Mock the session's post method context manager
        mock_post_cm = AsyncMock()
        mock_post_cm.__aenter__.return_value = mock_response
        mock_post_cm.__aexit__.return_value = None

        with patch.object(scanner.session, "post", return_value=mock_post_cm) as mock_post:
            result = await scanner._query_osv_api(osv_data)
            assert result == expected_response
            mock_post.assert_called_once_with(url=OSV_QUERY_URL, json=osv_data)
            mock_response.json.assert_called_once()
