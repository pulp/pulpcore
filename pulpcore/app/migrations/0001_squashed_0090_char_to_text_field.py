# Generated by Django 4.2.15 on 2024-10-23 09:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_lifecycle.mixins
import pulpcore.app.models.access_policy
import pulpcore.app.models.content
import pulpcore.app.models.fields
import pulpcore.app.models.publication
import pulpcore.app.models.task
import pulpcore.app.models.upload
import uuid


class Migration(migrations.Migration):

    replaces = [
        ("core", "0001_initial"),
        ("core", "0002_increase_artifact_size_field"),
        ("core", "0003_remove_upload_completed"),
        ("core", "0004_add_duplicated_reserved_resources"),
        ("core", "0005_progressreport_code"),
        ("core", "0006_repository_plugin_managed"),
        ("core", "0007_delete_progress_proxies"),
        ("core", "0008_published_metadata_as_content"),
        ("core", "0009_remove_task_non_fatal_errors"),
        ("core", "0010_pulp_fields"),
        ("core", "0011_relative_path"),
        ("core", "0012_auto_20191104_2000"),
        ("core", "0013_repository_pulp_type"),
        ("core", "0014_remove_repository_plugin_managed"),
        ("core", "0015_auto_20191112_1426"),
        ("core", "0016_charfield_to_textfield"),
        ("core", "0017_remove_task_parent"),
        ("core", "0018_auto_20191127_2350"),
        ("core", "0019_add_signing_service_model"),
        ("core", "0020_change_publishedartifact_constraints"),
        ("core", "0021_add_signing_service_foreign_key"),
        ("core", "0022_rename_last_version"),
        ("core", "0023_change_exporter_models"),
        ("core", "0024_use_local_storage_for_uploads"),
        ("core", "0025_task_parent_task"),
        ("core", "0026_task_group"),
        ("core", "0027_export_backend"),
        ("core", "0028_import_importer_pulpimporter_pulpimporterrepository"),
        ("core", "0029_export_delete"),
        ("core", "0030_taskgroup_all_tasks_dispatched"),
        ("core", "0031_import_export_validate_params"),
        ("core", "0032_export_to_chunks"),
        ("core", "0033_increase_remote_artifact_size_field"),
        ("core", "0034_groupprogressreport"),
        ("core", "0035_content_upstream_id"),
        ("core", "0036_unprotect_last_export"),
        ("core", "0037_pulptemporaryfile"),
        ("core", "0038_repository_remote"),
        ("core", "0039_change_download_concurrency"),
        ("core", "0040_set_admin_is_staff"),
        ("core", "0041_accesspolicy"),
        ("core", "0042_rbac_for_tasks"),
        ("core", "0043_toc_attribute"),
        ("core", "0044_temp_file_artifact_field"),
        ("core", "0045_accesspolicy_permissions_allow_null"),
        ("core", "0046_task__resource_job_id"),
        ("core", "0047_improve_orphan_cleanup"),
        ("core", "0048_fips_checksums"),
        ("core", "0049_add_file_field_to_uploadchunk"),
        ("core", "0050_namespace_access_policies"),
        ("core", "0051_timeoutfields"),
        ("core", "0052_tasking_logging_cid"),
        ("core", "0053_remote_headers"),
        ("core", "0054_add_public_key"),
        ("core", "0055_label"),
        ("core", "0056_remote_rate_limit"),
        ("core", "0057_add_label_indexes"),
        ("core", "0058_accesspolicy_customized"),
        ("core", "0059_proxy_creds"),
        ("core", "0060_data_migration_proxy_creds"),
        ("core", "0061_call_handle_artifact_checksums_command"),
        ("core", "0062_add_new_distribution_mastermodel"),
        ("core", "0063_repository_retained_versions"),
        ("core", "0064_repository_user_hidden"),
        ("core", "0064_add_new_style_task_columns"),
        ("core", "0065_merge_20210615_1211"),
        ("core", "0066_download_concurrency_and_retry_changes"),
        ("core", "0067_add_protect_to_task_reservation"),
        ("core", "0068_add_timestamp_of_interest"),
        ("core", "0069_update_json_fields"),
        ("core", "0070_rename_retained_versions"),
        ("core", "0071_filesystemexport_filesystemexporter"),
        ("core", "0072_add_method_to_filesystem_exporter"),
        ("core", "0073_encrypt_remote_fields"),
        ("core", "0074_acs"),
        ("core", "0075_rbaccontentguard"),
        ("core", "0076_remove_reserved_resource"),
        ("core", "0077_move_remote_url_credentials"),
        ("core", "0078_grouprole_role_userrole"),
        ("core", "0079_rename_permissions_assignment_accesspolicy_creation_hooks"),
        ("core", "0080_proxy_group_model"),
        ("core", "0081_reapplabel_group_permissions"),
        ("core", "0082_add_manage_roles_permissions"),
        ("core", "0083_alter_group_options"),
        ("core", "0084_alter_rbaccontentguard_options"),
        ("core", "0085_contentredirectcontentguard"),
        ("core", "0086_task_json_fields"),
        ("core", "0087_taskschedule"),
        ("core", "0088_accesspolicy_queryset_scoping"),
        ("core", "0089_alter_contentredirectcontentguard_options"),
        ("core", "0090_char_to_text_field"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("auth", "__first__"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Artifact",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "file",
                    pulpcore.app.models.fields.ArtifactFileField(
                        max_length=255, upload_to=pulpcore.app.models.content.Artifact.storage_path
                    ),
                ),
                ("size", models.BigIntegerField()),
                ("md5", models.CharField(db_index=True, max_length=32, null=True)),
                ("sha1", models.CharField(db_index=True, max_length=40, null=True)),
                ("sha224", models.CharField(db_index=True, max_length=56, null=True)),
                ("sha256", models.CharField(db_index=True, max_length=64, unique=True)),
                ("sha384", models.CharField(db_index=True, max_length=96, null=True, unique=True)),
                ("sha512", models.CharField(db_index=True, max_length=128, null=True, unique=True)),
                ("timestamp_of_interest", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Content",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("upstream_id", models.UUIDField(null=True)),
                ("timestamp_of_interest", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name_plural": "content",
            },
            bases=(models.Model, pulpcore.app.models.content.QueryMixin),
        ),
        migrations.CreateModel(
            name="ContentAppStatus",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("last_heartbeat", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ContentArtifact",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("relative_path", models.TextField()),
                (
                    "artifact",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="content_memberships",
                        to="core.artifact",
                    ),
                ),
                (
                    "content",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.content",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "unique_together": {("content", "relative_path")},
            },
            bases=(models.Model, pulpcore.app.models.content.QueryMixin),
        ),
        migrations.CreateModel(
            name="ContentGuard",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("description", models.TextField(null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Remote",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("url", models.TextField()),
                ("ca_cert", models.TextField(null=True)),
                ("client_cert", models.TextField(null=True)),
                ("tls_validation", models.BooleanField(default=True)),
                ("proxy_url", models.TextField(null=True)),
                (
                    "download_concurrency",
                    models.PositiveIntegerField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(
                                1, "Download concurrency must be at least 1"
                            )
                        ],
                    ),
                ),
                (
                    "policy",
                    models.TextField(
                        choices=[
                            ("immediate", "When syncing, download all metadata and content now."),
                            (
                                "on_demand",
                                "When syncing, download metadata, but do not download content now. Instead, download content as clients request it, and save it in Pulp to be served for future client requests.",
                            ),
                            (
                                "streamed",
                                "When syncing, download metadata, but do not download content now. Instead,download content as clients request it, but never save it in Pulp. This causes future requests for that same content to have to be downloaded again.",
                            ),
                        ],
                        default="immediate",
                    ),
                ),
                (
                    "connect_timeout",
                    models.FloatField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0, "Timeout must be >= 0")
                        ],
                    ),
                ),
                (
                    "sock_connect_timeout",
                    models.FloatField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0, "Timeout must be >= 0")
                        ],
                    ),
                ),
                (
                    "sock_read_timeout",
                    models.FloatField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0, "Timeout must be >= 0")
                        ],
                    ),
                ),
                (
                    "total_timeout",
                    models.FloatField(
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0, "Timeout must be >= 0")
                        ],
                    ),
                ),
                ("headers", models.JSONField(blank=True, null=True)),
                ("rate_limit", models.IntegerField(null=True)),
                ("max_retries", models.PositiveIntegerField(null=True)),
                ("client_key", pulpcore.app.models.fields.EncryptedTextField(null=True)),
                ("password", pulpcore.app.models.fields.EncryptedTextField(null=True)),
                ("proxy_password", pulpcore.app.models.fields.EncryptedTextField(null=True)),
                ("proxy_username", pulpcore.app.models.fields.EncryptedTextField(null=True)),
                ("username", pulpcore.app.models.fields.EncryptedTextField(null=True)),
            ],
            options={
                "default_related_name": "remotes",
            },
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("description", models.TextField(null=True)),
                ("next_version", models.PositiveIntegerField(default=0)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                (
                    "remote",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.remote"
                    ),
                ),
                ("user_hidden", models.BooleanField(default=False)),
                ("retain_repo_versions", models.PositiveIntegerField(default=None, null=True)),
            ],
            options={
                "verbose_name_plural": "repositories",
            },
        ),
        migrations.CreateModel(
            name="RepositoryVersion",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("number", models.PositiveIntegerField(db_index=True)),
                ("complete", models.BooleanField(db_index=True, default=False)),
                (
                    "base_version",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="versions",
                        to="core.repositoryversion",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="versions",
                        to="core.repository",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "ordering": ("number",),
                "get_latest_by": "number",
                "default_related_name": "versions",
                "unique_together": {("repository", "number")},
            },
        ),
        migrations.CreateModel(
            name="Upload",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("size", models.BigIntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Worker",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("last_heartbeat", models.DateTimeField(auto_now=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UploadChunk",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("offset", models.BigIntegerField()),
                ("size", models.BigIntegerField()),
                (
                    "upload",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="core.upload",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        default=None,
                        max_length=255,
                        upload_to=pulpcore.app.models.upload.UploadChunk.storage_path,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskGroup",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("description", models.TextField()),
                ("all_tasks_dispatched", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "state",
                    models.TextField(
                        choices=[
                            ("waiting", "Waiting"),
                            ("skipped", "Skipped"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                            ("canceling", "Canceling"),
                        ]
                    ),
                ),
                ("name", models.TextField()),
                ("started_at", models.DateTimeField(null=True)),
                ("finished_at", models.DateTimeField(null=True)),
                ("error", models.JSONField(null=True)),
                (
                    "worker",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="core.worker",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "parent_task",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="child_tasks",
                        to="core.task",
                    ),
                ),
                ("logging_cid", models.TextField(db_index=True, default="")),
                (
                    "reserved_resources_record",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "args",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder, null=True
                    ),
                ),
                (
                    "kwargs",
                    models.JSONField(
                        encoder=django.core.serializers.json.DjangoJSONEncoder, null=True
                    ),
                ),
                (
                    "task_group",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tasks",
                        to="core.taskgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
                "indexes": [
                    models.Index(fields=["pulp_created"], name="core_task_pulp_cr_10223f_idx")
                ],
                "permissions": [("manage_roles_task", "Can manage role assignments on task")],
            },
        ),
        migrations.CreateModel(
            name="RepositoryVersionContentDetails",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "count_type",
                    models.TextField(choices=[("A", "added"), ("P", "present"), ("R", "removed")]),
                ),
                ("content_type", models.TextField()),
                ("count", models.IntegerField()),
                (
                    "repository_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="counts",
                        to="core.repositoryversion",
                        to_field="pulp_id",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="RepositoryContent",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "content",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="version_memberships",
                        to="core.content",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.repository",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "version_added",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="added_memberships",
                        to="core.repositoryversion",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "version_removed",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="removed_memberships",
                        to="core.repositoryversion",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "unique_together": {
                    ("repository", "content", "version_added"),
                    ("repository", "content", "version_removed"),
                },
            },
        ),
        migrations.CreateModel(
            name="Publication",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("complete", models.BooleanField(db_index=True, default=False)),
                ("pass_through", models.BooleanField(default=False)),
                (
                    "repository_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.repositoryversion",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProgressReport",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("message", models.TextField()),
                (
                    "state",
                    models.TextField(
                        choices=[
                            ("waiting", "Waiting"),
                            ("skipped", "Skipped"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                            ("canceling", "Canceling"),
                        ],
                        default="waiting",
                    ),
                ),
                ("total", models.IntegerField(null=True)),
                ("done", models.IntegerField(default=0)),
                ("suffix", models.TextField(null=True)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="progress_reports",
                        to="core.task",
                        to_field="pulp_id",
                    ),
                ),
                ("code", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CreatedResource",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("object_id", models.UUIDField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        default=pulpcore.app.models.task.Task.current,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_resources",
                        to="core.task",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BaseDistribution",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("base_path", models.TextField(unique=True)),
                (
                    "content_guard",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.contentguard",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "remote",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.remote",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="RemoteArtifact",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("url", models.TextField(validators=[django.core.validators.URLValidator])),
                ("size", models.BigIntegerField(null=True)),
                ("md5", models.CharField(max_length=32, null=True)),
                ("sha1", models.CharField(max_length=40, null=True)),
                ("sha224", models.CharField(max_length=56, null=True)),
                ("sha256", models.CharField(max_length=64, null=True)),
                ("sha384", models.CharField(max_length=96, null=True)),
                ("sha512", models.CharField(max_length=128, null=True)),
                (
                    "content_artifact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.contentartifact",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "remote",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.remote",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "unique_together": {("content_artifact", "remote")},
            },
            bases=(models.Model, pulpcore.app.models.content.QueryMixin),
        ),
        migrations.CreateModel(
            name="PublishedArtifact",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("relative_path", models.TextField()),
                (
                    "content_artifact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="published_artifact",
                        to="core.contentartifact",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "publication",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="published_artifact",
                        to="core.publication",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "default_related_name": "published_artifact",
                "unique_together": {("publication", "relative_path")},
            },
        ),
        migrations.CreateModel(
            name="PublishedMetadata",
            fields=[
                ("relative_path", models.TextField()),
                (
                    "publication",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="published_metadata",
                        to="core.publication",
                        to_field="pulp_id",
                    ),
                ),
                (
                    "content_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="published_metadata",
                        serialize=False,
                        to="core.content",
                        to_field="pulp_id",
                    ),
                ),
            ],
            options={
                "default_related_name": "published_metadata",
                "unique_together": {("publication", "relative_path")},
            },
        ),
        migrations.CreateModel(
            name="SigningService",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("script", models.TextField()),
                ("public_key", models.TextField()),
                ("pubkey_fingerprint", models.TextField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AsciiArmoredDetachedSigningService",
            fields=[
                (
                    "signingservice_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.signingservice",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.signingservice",),
        ),
        migrations.CreateModel(
            name="PulpTemporaryFile",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "file",
                    pulpcore.app.models.fields.ArtifactFileField(
                        max_length=255,
                        upload_to=pulpcore.app.models.content.PulpTemporaryFile.storage_path,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(pulpcore.app.models.content.HandleTempFilesMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Distribution",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("base_path", models.TextField(unique=True)),
                (
                    "content_guard",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.contentguard",
                    ),
                ),
                (
                    "publication",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.publication",
                    ),
                ),
                (
                    "remote",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.remote"
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="distributions",
                        to="core.repository",
                    ),
                ),
                (
                    "repository_version",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="core.repositoryversion",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AlternateContentSource",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("last_refreshed", models.DateTimeField(null=True)),
                (
                    "remote",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.PROTECT, to="core.remote"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "acs",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AlternateContentSourcePath",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("path", models.TextField(default=None)),
                (
                    "alternate_content_source",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="paths",
                        to="core.alternatecontentsource",
                    ),
                ),
                (
                    "repository",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="core.repository"
                    ),
                ),
            ],
            options={
                "unique_together": {("alternate_content_source", "path")},
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RBACContentGuard",
            fields=[
                (
                    "contentguard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_rbaccontentguard",
                        serialize=False,
                        to="core.contentguard",
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("download_rbaccontentguard", "Can Download Content"),
                    (
                        "manage_roles_rbaccontentguard",
                        "Can manage role assignments on RBAC content guard",
                    ),
                ),
                "default_related_name": "%(app_label)s_%(model_name)s",
            },
            bases=("core.contentguard",),
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("name", models.TextField(db_index=True, unique=True)),
                ("description", models.TextField(null=True)),
                ("permissions", models.ManyToManyField(to="auth.permission")),
                ("locked", models.BooleanField(default=False)),
            ],
            options={
                "abstract": False,
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("object_id", models.TextField(null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_users",
                        to="core.role",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_roles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"], name="core_userro_content_5c0477_idx"
                    )
                ],
                "unique_together": {("user", "role", "content_type", "object_id")},
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
                "permissions": [("manage_roles_group", "Can manage role assignments on group")],
            },
            bases=(
                django_lifecycle.mixins.LifecycleModelMixin,
                "auth.group",
                pulpcore.app.models.access_policy.AutoAddObjPermsMixin,
            ),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="GroupRole",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("object_id", models.TextField(null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_roles",
                        to="core.group",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="object_groups",
                        to="core.role",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"], name="core_groupr_content_ea7d37_idx"
                    )
                ],
                "unique_together": {("group", "role", "content_type", "object_id")},
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ContentRedirectContentGuard",
            fields=[
                (
                    "contentguard_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_contentredirectcontentguard",
                        serialize=False,
                        to="core.contentguard",
                    ),
                ),
                (
                    "shared_secret",
                    models.BinaryField(
                        default=pulpcore.app.models.publication._gen_secret, max_length=32
                    ),
                ),
            ],
            options={
                "default_related_name": "%(app_label)s_%(model_name)s",
                "permissions": (
                    (
                        "manage_roles_contentredirectcontentguard",
                        "Can manage role assignments on Redirect content guard",
                    ),
                ),
            },
            bases=("core.contentguard",),
        ),
        migrations.CreateModel(
            name="AccessPolicy",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("statements", models.JSONField()),
                ("viewset_name", models.TextField(unique=True)),
                ("creation_hooks", models.JSONField(null=True)),
                ("customized", models.BooleanField(default=False)),
                ("queryset_scoping", models.JSONField(null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupProgressReport",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("message", models.TextField()),
                ("code", models.TextField()),
                ("total", models.IntegerField(default=0)),
                ("done", models.IntegerField(default=0)),
                ("suffix", models.TextField(null=True)),
                (
                    "task_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_progress_reports",
                        to="core.taskgroup",
                    ),
                ),
            ],
            options={
                "unique_together": {("code", "task_group")},
            },
        ),
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("object_id", models.UUIDField()),
                ("key", models.TextField(db_index=True)),
                ("value", models.TextField(db_index=True, null=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"
                    ),
                ),
            ],
            options={
                "unique_together": {("content_type", "object_id", "key")},
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="TaskSchedule",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("dispatch_interval", models.DurationField(null=True)),
                ("name", models.TextField(unique=True)),
                (
                    "next_dispatch",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("task_name", models.TextField()),
                (
                    "last_task",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="core.task"
                    ),
                ),
            ],
            options={
                "abstract": False,
                "permissions": [
                    ("manage_roles_taskschedule", "Can manage role assignments on task schedules")
                ],
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Exporter",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Export",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("params", models.JSONField(null=True)),
                (
                    "exporter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.exporter"
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        null=True, on_delete=django.db.models.deletion.PROTECT, to="core.task"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ExportedResource",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("object_id", models.UUIDField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"
                    ),
                ),
                (
                    "export",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exported_resources",
                        to="core.export",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PulpExport",
            fields=[
                (
                    "export_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_pulp_export",
                        serialize=False,
                        to="core.export",
                    ),
                ),
                ("output_file_info", models.JSONField(null=True)),
                ("toc_info", models.JSONField(null=True)),
            ],
            options={
                "default_related_name": "%(app_label)s_pulp_export",
            },
            bases=("core.export",),
        ),
        migrations.CreateModel(
            name="PulpExporter",
            fields=[
                (
                    "exporter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_pulp_exporter",
                        serialize=False,
                        to="core.exporter",
                    ),
                ),
                ("path", models.TextField()),
                (
                    "last_export",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="last_export",
                        to="core.pulpexport",
                    ),
                ),
                (
                    "repositories",
                    models.ManyToManyField(related_name="core_pulp_exporter", to="core.repository"),
                ),
            ],
            options={
                "default_related_name": "%(app_label)s_pulp_exporter",
            },
            bases=("core.exporter",),
        ),
        migrations.CreateModel(
            name="FilesystemExport",
            fields=[
                (
                    "export_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.export",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            bases=("core.export",),
        ),
        migrations.CreateModel(
            name="FilesystemExporter",
            fields=[
                (
                    "exporter_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_fs_exporter",
                        serialize=False,
                        to="core.exporter",
                    ),
                ),
                ("path", models.TextField()),
                (
                    "method",
                    models.TextField(
                        choices=[
                            ("write", "Export by writing"),
                            ("hardlink", "Export by hardlinking"),
                            ("symlink", "Export by symlinking"),
                        ],
                        default="write",
                    ),
                ),
            ],
            options={
                "default_related_name": "%(app_label)s_fs_exporter",
            },
            bases=("core.exporter",),
        ),
        migrations.CreateModel(
            name="Importer",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("pulp_type", models.TextField(db_index=True, default=None)),
                ("name", models.TextField(db_index=True, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Import",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("params", models.JSONField(null=True)),
                (
                    "task",
                    models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="core.task"),
                ),
                (
                    "importer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.importer"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PulpImport",
            fields=[
                (
                    "import_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_pulp_export",
                        serialize=False,
                        to="core.import",
                    ),
                ),
            ],
            options={
                "default_related_name": "%(app_label)s_pulp_export",
            },
            bases=("core.import",),
        ),
        migrations.CreateModel(
            name="PulpImporter",
            fields=[
                (
                    "importer_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        related_name="core_pulp_importer",
                        serialize=False,
                        to="core.importer",
                    ),
                ),
            ],
            options={
                "default_related_name": "%(app_label)s_pulp_importer",
            },
            bases=("core.importer",),
        ),
        migrations.CreateModel(
            name="PulpImporterRepository",
            fields=[
                (
                    "pulp_id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False
                    ),
                ),
                ("pulp_created", models.DateTimeField(auto_now_add=True)),
                ("pulp_last_updated", models.DateTimeField(auto_now=True, null=True)),
                ("source_repo", models.TextField()),
                (
                    "repository",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.repository"
                    ),
                ),
                (
                    "pulp_importer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="repo_map",
                        to="core.pulpimporter",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="repository",
            name="content",
            field=models.ManyToManyField(
                related_name="repositories", through="core.RepositoryContent", to="core.content"
            ),
        ),
        migrations.AddField(
            model_name="content",
            name="_artifacts",
            field=models.ManyToManyField(through="core.ContentArtifact", to="core.artifact"),
        ),
    ]
