# Generated by Django 4.2.22 on 2025-06-06 14:32

from django.db import migrations
from pulpcore.migrations import RequireVersion

# This migration is supposed to be zero downtime upgrade safe.


TASK_INSERT_TRIGGER_UP = """
CREATE FUNCTION on_insert_timestamp_task()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $$
    DECLARE
      res_list text[];
      res_list_shared text[];
    BEGIN
      res_list := array_agg(q.res) FROM (SELECT regexp_replace(unnest(NEW.reserved_resources_record), '^shared:', '') res) AS q;
      res_list_shared := array_agg(q.res) FROM (SELECT 'shared:' || unnest(res_list) AS res) AS q;
      PERFORM pg_advisory_xact_lock(4711, q.id) FROM (SELECT hashtext(res) AS id FROM unnest(res_list) AS res ORDER BY id) AS q;
      NEW.pulp_created = clock_timestamp();
      IF NEW.pulp_created <= (
        SELECT max(pulp_created) FROM core_task
        WHERE
          state NOT IN ('completed', 'failed', 'canceled', 'skipped')
        AND
          reserved_resources_record && (res_list || res_list_shared)
      )
      THEN
        RAISE EXCEPTION 'Clock screw detected.';
      END IF;
      RETURN NEW;
    END;
  $$
;

CREATE FUNCTION on_update_timestamp_task()
  RETURNS TRIGGER
  LANGUAGE plpgsql
  AS $$
    BEGIN
      -- This is mainly a safeguard to prevent old code from messing with the timestamp, now that the database is in charge.
      RAISE EXCEPTION 'Updating pulp_created is not allowed.';
    END;
  $$
;

CREATE TRIGGER on_insert_timestamp_task_trigger
  BEFORE INSERT
  ON core_task
  FOR EACH ROW
  EXECUTE FUNCTION on_insert_timestamp_task()
;

CREATE TRIGGER on_update_timestamp_task_trigger
  BEFORE UPDATE
  ON core_task
  FOR EACH ROW
  WHEN (OLD.pulp_created <> NEW.pulp_created)
  EXECUTE FUNCTION on_update_timestamp_task()
;
"""

TASK_INSERT_TRIGGER_DOWN = """
DROP TRIGGER on_update_timestamp_task_trigger on core_task;
DROP TRIGGER on_insert_timestamp_task_trigger on core_task;
DROP FUNCTION on_update_timestamp_task;
DROP FUNCTION on_insert_timestamp_task;
"""


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0133_repositoryversion_content_ids"),
    ]

    operations = [
        RequireVersion("core", "3.82.1"),
        migrations.RunSQL(sql=TASK_INSERT_TRIGGER_UP, reverse_sql=TASK_INSERT_TRIGGER_DOWN),
    ]
