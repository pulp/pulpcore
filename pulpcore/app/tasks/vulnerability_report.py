import aiohttp
import asyncio
import importlib

from asgiref.sync import sync_to_async
from django.conf import settings

from pulpcore.app.util import get_domain
from pulpcore.app.models.progress import ProgressReport
from pulpcore.app.models.vulnerability_report import VulnerabilityReport
from pulpcore.constants import OSV_QUERY_URL, TASK_STATES


class VulnerabilityReportScanner:
    """
    A scanner class to collect vulnerabilities from Pulp Contents using the OSV.dev API.

    Attributes:
        semaphore (asyncio.Semaphore): Controls concurrent API requests to osv.dev service.
        generator (AsyncGenerator): The async generator with the content data to be scanned for
            vulnerabilities.
        session (aiohttp.ClientSession): HTTP session for making requests to the OSV.dev API.
            Defaults to a new session if not provided.
        created (ProgressReport): Tracks the number of new VulnerabilityReport records created
            during the scanning process.
        updated (ProgressReport): Tracks the number of existing VulnerabilityReport records
            updated during the scanning process.
        total_scanned (ProgressReport): Tracks the total number of content items that have
            been processed for vulnerability scanning.
    """

    def __init__(self, semaphore, generator, session=None):
        self.semaphore = semaphore
        self.generator = generator
        self.session = session or aiohttp.ClientSession()
        self.created = ProgressReport(
            message="Vulnerability Reports created", code="created", state=TASK_STATES.RUNNING
        )
        self.updated = ProgressReport(
            message="Vulnerability Reports updated", code="updated", state=TASK_STATES.RUNNING
        )
        self.total_scanned = ProgressReport(
            message="Content scanned", code="total_scanned", state=TASK_STATES.RUNNING
        )

    async def scan_packages(self):
        """
        Main entry point for scanning packages for vulnerabilities. Progress is tracked through
        three ProgressReport instances (created, updated, total_scanned).
        """
        tasks = []
        async for content in self.generator:
            tasks.append(asyncio.create_task(self.scan_package(content)))
        await asyncio.gather(*tasks)
        await self.session.close()

        if self.created.done > 0:
            self.created.state = TASK_STATES.COMPLETED
            await self.created.asave()
        if self.total_scanned.done > 0:
            self.total_scanned.state = TASK_STATES.COMPLETED
            await self.total_scanned.asave()
        if self.updated.done > 0:
            self.updated.state = TASK_STATES.COMPLETED
            await self.updated.asave()

    async def scan_package(self, repo_content_osv_data):
        """
        Makes a request to the osv.dev API and store the results in VulnerabilityReport model.

        Args:
            repo_content_osv_data (Dict[str, Any]): A dictionary with osv.dev expected request
              data format plus associated Pulp Content and RepoVersion.
        """
        vulns, content, repo_version = await self._process_reports(repo_content_osv_data)
        await self._save_vulnerability_report(vulns, content, repo_version)

    async def _process_reports(self, repo_content_osv_data):
        """
        Process vulnerability scanning data by querying the OSV API and extracting results.

        Args:
            repo_content_osv_data (Dict[str, Any]): A dictionary containing OSV.dev expected
                request data format plus associated Pulp Content and RepositoryVersion.

        Returns:
            tuple:
                - vulns (List[Dict]): List of vulnerability (vulns) returned from OSV.dev API
                - pulp_content (Content): The Pulp Content instance that was scanned
                - repo_version (RepositoryVersion or None): The RepositoryVersion where the
                  Content is present
        """
        vulns = []
        async with self.semaphore:
            repo_version = repo_content_osv_data.pop("repo_version", None)
            pulp_content = repo_content_osv_data.pop("content")
            vulnerability_data = await self._query_osv_api(repo_content_osv_data)
            vulns = vulnerability_data.get("vulns", [])
            while next_page_token := vulnerability_data.get("next_page_token"):
                repo_content_osv_data["page_token"] = next_page_token
                vulnerability_data = await self._query_osv_api(repo_content_osv_data)
                vulns.extend(vulnerability_data)
        await self.total_scanned.aincrement()
        return vulns, pulp_content, repo_version

    async def _query_osv_api(self, osv_data):
        """
        Make a single HTTP POST request to the OSV.dev vulnerability database API.

        Args:
            osv_data (Dict[str, Any]): OSV query data dictionary containing package information
                in the format expected by the OSV.dev API.

        Returns:
            Dict[str, Any]: JSON response from the OSV API containing vulnerability data.
        """
        async with self.session.post(url=OSV_QUERY_URL, json=osv_data) as response:
            try:
                return await response.json()
            except aiohttp.ContentTypeError:
                raise RuntimeError("Vuln report task failed to query osv.dev data.")

    async def _save_vulnerability_report(self, vulns, content, repo_version):
        """
        Save vulnerability report to the database.

        Args:
            vulns (List): osv.dev vulns output
            content (Content): A Pulp Content instance which vulnerabilities were verified
            repo_version (RepositoryVersion): The RepositoryVersion where Content is present
        """

        vuln_report, created = await sync_to_async(VulnerabilityReport.objects.update_or_create)(
            vulns=vulns, pulp_domain=get_domain(), content=content
        )
        await vuln_report.repo_versions.aadd(repo_version)

        if created:
            await self.created.aincrement()
        else:
            await self.updated.aincrement()


async def check_content(func, args):
    """
    Spawn tasks for each async generator value to make the API requests (scan) to osv.dev.

    Args:
        func (callable | str): A Pulp plugin function that should return an async generator with
          the osv.dev expected request data format plus associated Pulp Content and RepoVersion.
        args (tuple): The positional arguments to pass on to the func.
    """
    module_name, function_name = func.rsplit(".", 1)
    module = importlib.import_module(module_name)
    func = getattr(module, function_name)

    semaphore = asyncio.Semaphore(settings.VULN_REPORT_TASK_LIMITER)
    vuln_report_scanner = VulnerabilityReportScanner(semaphore, func(*args))
    await vuln_report_scanner.scan_packages()
