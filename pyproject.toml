[build-system]
requires = [
    "setuptools >= 40.8.0",
    "wheel >= 0.29.0",
]
build-backend = 'setuptools.build_meta'

[project]
name = "pulpcore"
version = "3.71.1"
description = "Pulp Django Application and Related Modules"
readme = "README.md"
authors = [
  {name="Pulp Team", email="pulp-list@redhat.com"},
]
classifiers=[
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
  "Operating System :: POSIX :: Linux",
  "Development Status :: 5 - Production/Stable",
  "Framework :: Django",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dependencies = [
  "aiodns>=3.0,<=3.2.0",
  "aiofiles>=22.1,<24.2.0",
  "aiohttp>=3.8.1,<3.11.13",
  "asyncio-throttle>=1.0,<=1.0.2",
  "async-timeout>=4.0.3,<4.0.4;python_version<'3.11'",
  "backoff>=2.1.2,<2.2.2",
  "click>=8.1.0,<=8.1.8",
  "cryptography>=38.0.1,<44.0.2",
  "Django~=4.2.0",  # LTS version, switch only if we have a compelling reason to",
  "django-filter>=23.1,<=25.1",
  "django-guid>=3.3,<=3.5.1",
  "django-import-export>=2.9,<3.4.0",
  "django-lifecycle>=1.0,<=1.2.4",
  "djangorestframework>=3.14.0,<=3.15.2",
  "djangorestframework-queryfields>=1.0,<=1.1.0",
  "drf-access-policy>=1.1.2,<1.5.1",
  "drf-nested-routers>=0.93.4,<=0.94.1",
  "drf-spectacular==0.27.2",  # We monkeypatch this so we need a very narrow requirement string
  "dynaconf>=3.1.12,<3.3.0",
  "gunicorn>=20.1,<23.1.0",
  "importlib-metadata>=6.0.1,<=6.0.1",  # Pinned to fix opentelemetry dependency solving issues with pip
  "jinja2>=3.1,<=3.1.5",
  "json_stream>=2.3.2,<2.4",
  "jq>=1.6.0,<1.9.0",
  "PyOpenSSL<26.0",
  "opentelemetry-api>=1.27.0,<1.31",
  "opentelemetry-sdk>=1.27.0,<1.31",
  "opentelemetry-exporter-otlp-proto-http>=1.27.0,<1.31",
  "protobuf>=4.21.1,<6.0",
  "pulp-glue>=0.18.0,<0.31",
  "pygtrie>=2.5,<=2.5.0",
  "psycopg[binary]>=3.1.8,<=3.2.4",
  "pyparsing>=3.1.0,<=3.2.1",
  "python-gnupg>=0.5,<=0.5.4",
  "PyYAML>=5.1.1,<=6.0.2",
  "redis>=4.3,<5.2.2",
  "tablib<3.6.0",
  "url-normalize>=1.4.3,<=1.4.3",
  "uuid6>=2023.5.2,<=2024.7.10",
  "whitenoise>=5.0,<6.10.0",
  "yarl>=1.8,<1.18.4",
]

[project.optional-dependencies]
sftp = ["django-storages[sftp]==1.14.4"]
s3 = ["django-storages[boto3]==1.14.3"]
google = ["django-storages[google]==1.14.3"]
azure = ["django-storages[azure]==1.14.3"]
prometheus = ["django-prometheus"]
kafka = [
  # Pinned because project warns "things might (and will) break with every update"
  "cloudevents==1.11.0",
  "confluent-kafka>=2.4.0,<2.9.0",
]

[project.urls]
Homepage = "https://pulpproject.org"
Documentation = "https://pulpproject.org"
Repository = "https://github.com/pulp/pulpcore"
"Bug Tracker" = "https://github.com/pulp/pulpcore/issues"
Changelog = "https://pulpproject.org/pulpcore/changes/"

[project.scripts]
pulpcore-manager = "pulpcore.app.manage:manage"
pulpcore-worker = "pulpcore.tasking.entrypoint:worker"
pulpcore-api = "pulpcore.app.entrypoint:main"
pulpcore-content = "pulpcore.content.entrypoint:main"

[project.entry-points."pulpcore.plugin"]
pulp_file = "pulp_file:default_app_config"
pulp_certguard = "pulp_certguard:default_app_config"

[project.entry-points."pytest11"]
pulpcore = "pulpcore.pytest_plugin"
pulp_file = "pulp_file.pytest_plugin"
pulp_certguard = "pulp_certguard.pytest_plugin"

[tool.setuptools.packages.find]
where = ["."]

[tool.towncrier]
package = "pulpcore"
filename = "CHANGES.md"
directory = "CHANGES/"
title_format = "## {version} ({project_date}) {{: #{version} }}"
template = "CHANGES/.TEMPLATE.md"
issue_format = "[#{issue}](https://github.com/pulp/pulpcore/issues/{issue})"
start_string = "[//]: # (towncrier release notes start)\n"
underlines = ["", "", ""]

    [[tool.towncrier.section]]
        path = ""
        name = "REST API"

    [[tool.towncrier.section]]
        path = "plugin_api"
        name = "Plugin API"

    [[tool.towncrier.section]]
        path = "pulp_file"
        name = "Pulp File"

    [[tool.towncrier.section]]
        path = "pulp_certguard"
        name = "Pulp Cert Guard"

    [[tool.towncrier.type]]
        directory = "feature"
        name = "Features"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "bugfix"
        name = "Bugfixes"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "doc"
        name = "Improved Documentation"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "removal"
        name = "Removals"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "deprecation"
        name = "Deprecations"
        showcontent = true

    [[tool.towncrier.type]]
        directory = "misc"
        name = "Misc"
        showcontent = false


[tool.black]
line-length = 100
target-version = ["py36", "py37"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | migrations
  | docs
  | protobuf
)/
'''

[tool.check-manifest]
ignore = [
    ".git-blame-ignore-revs",
    ".bumpversion.cfg",
    "CHANGES/**",
    "CONTRIBUTING.rst",
    "HISTORY.rst",
    "dev_requirements.txt",
    "doc_requirements.txt",
    "docs/**",
    "staging_docs/**",
    "template_config.yml",
    ".coveragerc",
    ".dependabot/config.yml",
    ".pep8speaks.yml",
    ".ci/**",
    ".github/**",
    "lint_requirements.txt",
    ".flake8",
    "pulpcore/tests/functional/assets/**",
]

[tool.bumpversion]
# This section is managed by the plugin template. Do not edit manually.

current_version = "3.71.1"
commit = false
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<alpha>0a)?(?P<patch>\\d+)(\\.(?P<release>[a-z]+))?"
serialize = [
  "{major}.{minor}.{patch}.{release}",
  "{major}.{minor}.{patch}",
  "{major}.{minor}.{alpha}{patch}.{release}",
  "{major}.{minor}.{alpha}{patch}",
]

[tool.bumpversion.parts.alpha]
# This section is managed by the plugin template. Do not edit manually.

# This is sort of a hack. In PEP440 prerelease markers work quite differently.
# But this fits best with the way we have been doing release versions.
optional_value = "final"
values = [
  "0a",
  "final",
]
independent = true

[tool.bumpversion.parts.release]
# This section is managed by the plugin template. Do not edit manually.

optional_value = "prod"
values = [
  "dev",
  "prod",
]

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./pulpcore/app/apps.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./pulp_file/app/__init__.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./pulp_certguard/app/__init__.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
# This section is managed by the plugin template. Do not edit manually.

filename = "./pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""